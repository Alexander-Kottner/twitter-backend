// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username      String  @unique // Unique constraint
  name          String? @db.VarChar(35) // Limit display name to 35 characters
  email         String  @unique // Unique constraint
  password      String
  isPrivate     Boolean @default(false) // Flag to indicate if the profile is private
  profilePicture String? // URL of the profile picture stored in S3

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  reactions Reaction[]
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  
  // Add parent-child relationship for comments
  parentId String? @db.Uuid // Optional parent post ID for comments
  parent   Post?   @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  comments Post[]  @relation("Comments")
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  reactions Reaction[]
  images PostImage[] // Relation to PostImage model
}

model PostImage {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key
  
  postId String @db.Uuid // Foreign Key to Post
  s3Key String  // S3 key to access the image
  index Int     // Index of the image (0-3) to maintain order
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many
  
  @@unique([postId, index]) // Ensure unique index per post
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId String @db.Uuid // Foreign Key
  postId String @db.Uuid // Foreign Key
  type   ReactionType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // One to many
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many

  @@unique([userId, postId, type]) // Ensure a user can only have one reaction of each type per post
}

enum ReactionType {
  LIKE
  RETWEET
}
